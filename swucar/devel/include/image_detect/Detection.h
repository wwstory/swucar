// Generated by gencpp from file image_detect/Detection.msg
// DO NOT EDIT!


#ifndef IMAGE_DETECT_MESSAGE_DETECTION_H
#define IMAGE_DETECT_MESSAGE_DETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace image_detect
{
template <class ContainerAllocator>
struct Detection_
{
  typedef Detection_<ContainerAllocator> Type;

  Detection_()
    : pos()
    , classes()
    , scores()  {
    }
  Detection_(const ContainerAllocator& _alloc)
    : pos(_alloc)
    , classes(_alloc)
    , scores(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pos_type;
  _pos_type pos;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _classes_type;
  _classes_type classes;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _scores_type;
  _scores_type scores;





  typedef boost::shared_ptr< ::image_detect::Detection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_detect::Detection_<ContainerAllocator> const> ConstPtr;

}; // struct Detection_

typedef ::image_detect::Detection_<std::allocator<void> > Detection;

typedef boost::shared_ptr< ::image_detect::Detection > DetectionPtr;
typedef boost::shared_ptr< ::image_detect::Detection const> DetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::image_detect::Detection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::image_detect::Detection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace image_detect

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'image_detect': ['/home/lab1008/swucar/src/image_detect/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::image_detect::Detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::image_detect::Detection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_detect::Detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_detect::Detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_detect::Detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_detect::Detection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::image_detect::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "35145143adb0a6def78c300efff37377";
  }

  static const char* value(const ::image_detect::Detection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x35145143adb0a6deULL;
  static const uint64_t static_value2 = 0xf78c300efff37377ULL;
};

template<class ContainerAllocator>
struct DataType< ::image_detect::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "image_detect/Detection";
  }

  static const char* value(const ::image_detect::Detection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::image_detect::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] pos       # 百分比位置 [x1, y1, x2, y2, _x1, _y1, _x2, _y2 ...]\n"
"uint32[] classes    # 类别\n"
"float32[] scores    # 分类自信值\n"
;
  }

  static const char* value(const ::image_detect::Detection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::image_detect::Detection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
      stream.next(m.classes);
      stream.next(m.scores);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Detection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::image_detect::Detection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::image_detect::Detection_<ContainerAllocator>& v)
  {
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "classes[]" << std::endl;
    for (size_t i = 0; i < v.classes.size(); ++i)
    {
      s << indent << "  classes[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.classes[i]);
    }
    s << indent << "scores[]" << std::endl;
    for (size_t i = 0; i < v.scores.size(); ++i)
    {
      s << indent << "  scores[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.scores[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMAGE_DETECT_MESSAGE_DETECTION_H
